geom_vline(aes(xintercept=mean(weight)), color="blue", linetype="dashed", size=1)
ggplot(data=bubbles, aes(x=log(time))) + geom_histogram(binwidth = .5) +
geom_vline(aes(xintercept=mean(time)), color="blue", linetype="dashed", size=1)
ggplot(data=bubbles, aes(x=log(time))) + geom_histogram(binwidth = .5) +
geom_vline(aes(xintercept=mean(log(time))), color="blue", linetype="dashed", size=1)
ggplot(data=bubbles, aes(x=time)) + geom_histogram(binwidth = .5) +
geom_vline(aes(xintercept=mean(time)), color="blue", linetype="dashed", size=1)
ggplot(data=bubbles, aes(x=time)) + geom_histogram(binwidth = 30) +
geom_vline(aes(xintercept=mean(time)), color="blue", linetype="dashed", size=1)
ggplot(data=bubbles, aes(x=time, color=color)) +
geom_histogram(fill="white", position="dodge")+
theme(legend.position="top")
ggplot(data=bubbles, aes(x=time, color=color)) +
geom_histogram(fill="white", position="dodge",binwidth = 30)+
theme(legend.position="top")
ggplot(data=bubbles, aes(x=time, color=color)) +
geom_histogram(fill=color, position="dodge",binwidth = 30)+
theme(legend.position="top")
ggplot(data=bubbles, aes(x=time, color=color)) +
geom_histogram(fill=bubbles$color, position="dodge",binwidth = 30)+
theme(legend.position="top")
ggplot(data=bubbles, aes(x=time, color=color)) +
geom_histogram( position="dodge",binwidth = 30)+
theme(legend.position="top")
ggplot(data=bubbles, aes(x=time, color=color, fill=color)) +
geom_histogram(position="dodge",binwidth = 30)+
theme(legend.position="top")
ggplot(data=bubbles, aes(x=time)) + geom_histogram(binwidth = 50) +
geom_vline(aes(xintercept=mean(time)), color="blue", linetype="dashed", size=1)
ggplot(data=bubbles, aes(x=time, color=color, fill=color)) +
geom_histogram(position="dodge",binwidth = 50)+
theme(legend.position="top")
ggplot(data=bubbles, aes(x=time, color=color, fill=color)) +
geom_histogram(position="dodge",binwidth = 100)+
theme(legend.position="top")
ggplot(data=bubbles, aes(x=time, color=color, fill=color)) +
geom_histogram(binwidth = 100)+
theme(legend.position="top")
ggplot(data=bubbles, aes(x=time, color=color, fill=color)) +\
geom_histogram(binwidth = 100)+
theme(legend.position="top")
ggplot(data=bubbles, aes(x=time, color=color, fill=color)) + \
geom_histogram(binwidth = 100)+
theme(legend.position="top")
ggplot(data=bubbles, aes(x=color, y=time)) +
geom_boxplot()
ggplot(data=bubbles, aes(x=color, y=time)) +
geom_boxplot() + scale_color_manual(values=c("blue", "green", "orange", "red","yellow"))
ggplot(data=bubbles, aes(x=color, y=time, color = color)) +
geom_boxplot() + scale_color_manual(values=c("blue", "green", "orange", "red","yellow"))
error <- qt(conf.level,df=length(bubbles$trial)/5-1)*sd.recipe$`bubbles$time`/sqrt(length(bubbles)/5)
mean.recipe <- aggregate(bubbles$time~bubbles$color, FUN=mean)
error <- qt(conf.level,df=length(bubbles$trial)/10-1)*sd.recipe$`bubbles$time`/sqrt(length(bubbles)/5)
error
#interval
left <- mean.recipe$`bubbles$time`-error
right <- mean.recipe$`bubbles$time`+error
for(x in 1:5){
cat("We are 95% confident that the population mean falls between",left[x],"and", right[x],"\n")
}
error <- qt(conf.level,df=length(bubbles$trial)5-1)*sd.recipe$`bubbles$time`/sqrt(length(bubbles$trial)/5)
error <- qt(conf.level,df=length(bubbles$trial)/5-1)*sd.recipe$`bubbles$time`/sqrt(length(bubbles$trial)/5)
error
#interval
left <- mean.recipe$`bubbles$time`-error
right <- mean.recipe$`bubbles$time`+error
for(x in 1:5){
cat("We are 95% confident that the population mean falls between",left[x],"and", right[x],"\n")
}
#setup
conf.level <- 1-(alpha/2) # for two-sided
error <- qt(conf.level,df=length(bubbles$trial)/10-1)*sd.recipe$`bubbles$time`/sqrt(length(bubbles$trial)/10)
error
#interval
left <- mean.recipe$`bubbles$time`-error
right <- mean.recipe$`bubbles$time`+error
for(x in 1:5){
cat("We are 95% confident that the population mean falls between",left[x],"and", right[x],"\n")
}
ggplot(data=bubbles, aes(x=color, y=time, color = color)) +
geom_boxplot() + scale_color_manual(values=c("blue", "green", "orange", "red","yellow")) +
labs(title = "Boxplots for each Recipe's Bubble Lifespan Distribution", x="Recipes", y="Time (seconds")
ggplot(data=bubbles, aes(x=color, y=time, color = color)) +
geom_boxplot() + scale_color_manual(values=c("blue", "green", "orange", "red","yellow")) +
labs(title = "Boxplots for each Recipe's Bubble Lifespan Distribution", x="Recipes", y="Time (seconds)")
ggplot(data=bubbles, aes(x=color, y=time, color = color)) +
geom_boxplot() + scale_color_manual(values=c("blue", "green", "orange", "red","yellow")) +
labs(title = "Boxplots for each Recipe's Bubble Lifespan Distribution", x="Recipes", y="Time (seconds)",color="Recipe")
levels(bubbles$color)
levels(bubbles$color) <- c("2","1.5","0.5","0","1")
# graphs
ggplot(data=bubbles, aes(x=color, y=time, color=color)) + geom_bar(stat="identity")
ggplot(data=bubbles, aes(x=time)) + geom_histogram(binwidth = 30) +
geom_vline(aes(xintercept=mean(time)), color="blue", linetype="dashed", size=1)
ggplot(data=bubbles, aes(x=time, color=color, fill=color)) +
geom_histogram(position="dodge",binwidth = 100)+
theme(legend.position="top")
ggplot(data=bubbles, aes(x=color, y=time, color = color)) +
geom_boxplot() + scale_color_manual(values=c("blue", "green", "orange", "red","yellow")) +
labs(title = "Boxplots for each Recipe's Bubble Lifespan Distribution", x="Recipes", y="Time (seconds)",color="Recipe")
bubbles$color <- factor(bubbles$color, levels = c("0", "0.5", "1", "1.5", "2"))
# graphs
ggplot(data=bubbles, aes(x=color, y=time, color=color)) + geom_bar(stat="identity")
ggplot(data=bubbles, aes(x=time)) + geom_histogram(binwidth = 30) +
geom_vline(aes(xintercept=mean(time)), color="blue", linetype="dashed", size=1)
ggplot(data=bubbles, aes(x=time, color=color, fill=color)) +
geom_histogram(position="dodge",binwidth = 100)+
theme(legend.position="top")
ggplot(data=bubbles, aes(x=color, y=time, color = color)) +
geom_boxplot() + scale_color_manual(values=c("blue", "green", "orange", "red","yellow")) +
labs(title = "Boxplots for each Recipe's Bubble Lifespan Distribution", x="Recipes", y="Time (seconds)",color="Recipe")
ggplot(data=bubbles, aes(x=color, y=time, color = color)) +
geom_boxplot() + scale_color_manual(values=c("red", "yellow", "orange", "green","blue")) +
labs(title = "Boxplots for each Recipe's Bubble Lifespan Distribution", x="Recipes", y="Time (seconds)",color="Recipe")
ggplot(data=bubbles, aes(x=color, y=time, color = color)) +
geom_boxplot() + scale_color_manual(values=c("red", "yellow", "orange", "green","blue")) +
labs(title = "Boxplots for each Recipe's Bubble Lifespan Distribution", x="Amt. of Glycerine (in tbsp)", y="Time (seconds)",color="Recipe")
ggplot(data=bubbles, aes(x=color, y=time, color = color)) +
geom_boxplot() + scale_color_manual(values=c("red", "yellow", "orange", "green","blue")) +
labs(title = "Boxplots for each Recipe's Bubble Lifespan Distribution", x="Amt. of Glycerine (in tbsp)", y="Time (seconds)",color="Recipe")
ggplot(data=bubbles, aes(x=time)) + geom_histogram(binwidth = 30) +
geom_vline(aes(xintercept=mean(time)), color="blue", linetype="dashed", size=1)
# graphs
ggplot(data=bubbles, aes(x=color, y=time, color=color)) + geom_bar(stat="identity")
ggplot(data=bubbles, aes(x=time)) + geom_histogram(binwidth = 30) +
geom_vline(aes(xintercept=mean(time)), color="blue", linetype="dashed", size=1) +
labs(title = "Distribution of Times for the Bubble Recipes", x="Time (in seconds)", y="Frequency per bin (width = 30)")
ggplot(data=bubbles, aes(x=color, y=time, color = color)) +
geom_boxplot() + scale_color_manual(values=c("red", "yellow", "orange", "green","blue")) +
labs(title = "Boxplots for each Recipe's Bubble Lifespan Distribution", x="Amt. of Glycerin (in tbsp)", y="Time (seconds)",color="Recipe")
mean(bubbles$trial)
View(bubbles)
mean(bubbles$time)
mean.recipe
mean(bubbles$time) - mean.recipe$`bubbles$time`
sum(mean(bubbles$time) - mean.recipe$`bubbles$time`)
# for decomposition table
mean.recipe$`bubbles$time` - mean(bubbles$time)
sum(mean.recipe$`bubbles$time` - mean(bubbles$time)) # does it sum to 1
View(bubbles)
with(bubbles, bubbles[order(color)])
with(bubbles, bubbles[order(color),])
# sort list for residuals
with(bubbles, bubbles[order(color), 3])
mean.recipe$`bubbles$time`
rep(mean.recipe$`bubbles$time`, 5)
rep(mean.recipe$`bubbles$time`, each = 5)
mean.recipe$`bubbles$time`
mean.recipe
mean.recipe
levels(mean.recipe$`bubbles$color`)
levels(mean.recipe$`bubbles$color`) <- c("2","1.5","0.5","0","1")
mean.recipe$`bubbles$color` <- factor(mean.recipe$`bubbles$color`, levels = c("0", "0.5", "1", "1.5", "2"))
mean.recipe$`bubbles$time`
mean.recipe
with(bubbles, bubbles[order(color), 3])
mean.recipe$`bubbles$color`$'0'
mean.recipe$`bubbles$time`
mean.recipe$`bubbles$time`[1]
c(rep(mean.recipe$`bubbles$time`[4], 5), rep(mean.recipe$`bubbles$time`[3], 5), rep(mean.recipe$`bubbles$time`[5], 5), rep(mean.recipe$`bubbles$time`[2], 5), rep(mean.recipe$`bubbles$time`[1], 5))
mean.recipe$`bubbles$time`
mean.recipe
with(bubbles, bubbles[order(color), 3])
with(bubbles, bubbles[order(color), ])
# calculate residuals
with(bubbles, bubbles[order(color), 3]) - c(rep(mean.recipe$`bubbles$time`[4], 5), rep(mean.recipe$`bubbles$time`[3], 5), rep(mean.recipe$`bubbles$time`[5], 5), rep(mean.recipe$`bubbles$time`[2], 5), rep(mean.recipe$`bubbles$time`[1], 5))
sum(with(bubbles, bubbles[order(color), 3]) - c(rep(mean.recipe$`bubbles$time`[4], 5), rep(mean.recipe$`bubbles$time`[3], 5), rep(mean.recipe$`bubbles$time`[5], 5), rep(mean.recipe$`bubbles$time`[2], 5), rep(mean.recipe$`bubbles$time`[1], 5)))
mean(bubbles$time)
mean(bubbles$time)^2 *50
factor.a <- c(7,8,5,10)
factor.b <- c(8,7,10,12)
factor.c <- c(10,18,11,14)
factor.d <- c(14,11, 9, 10)
mean(c(factor.a,factor.b,factor.c,factor.d))
mean(factor.a)
mean(factor.b)
mean(factor.c)
mean(factor.d)
factor.a[1]
grand.avg <- mean(c(factor.a,factor.b,factor.c,factor.d))
grand.avg
#by level
grand.avg - mean(factor.a)
grand.avg - mean(factor.b)
grand.avg - mean(factor.c)
grand.avg - mean(factor.d)
#by row
grand.avg - mean(c(factor.c[1],factor.b[2],factor.a[3],factor.d[4]))
grand.avg - mean(c(factor.c[2],factor.b[3],factor.a[4],factor.d[1]))
#by level
mean(factor.a) - grand.avg
mean(factor.b) - grand.avg
mean(factor.c) - grand.avg
mean(factor.d) - grand.avg
#by row
mean(c(factor.c[1],factor.b[2],factor.a[3],factor.d[4])) - grand.avg
mean(c(factor.c[2],factor.b[3],factor.a[4],factor.d[1])) - grand.avg
mean(c(factor.c[3],factor.b[4],factor.a[1],factor.d[2])) - grand.avg
mean(c(factor.c[4],factor.b[1],factor.a[2],factor.d[3])) - grand.avg
#by col
mean(c(factor.c[1],factor.b[1],factor.a[1],factor.d[1])) - grand.avg
mean(c(factor.c[2],factor.b[2],factor.a[2],factor.d[2])) - grand.avg
mean(c(factor.c[3],factor.b[3],factor.a[3],factor.d[3])) - grand.avg
mean(c(factor.c[4],factor.b[4],factor.a[4],factor.d[4])) - grand.avg
#residuals
row.effects <- c(rep(mean(c(factor.c[1],factor.b[2],factor.a[3],factor.d[4])) - grand.avg,4),
rep(mean(c(factor.c[2],factor.b[3],factor.a[4],factor.d[1])) - grand.avg,4),
rep(mean(c(factor.c[3],factor.b[4],factor.a[1],factor.d[2])) - grand.avg,4),
rep(mean(c(factor.c[4],factor.b[1],factor.a[2],factor.d[3])) - grand.avg,4))
col.effects <- rep(c(mean(c(factor.c[1],factor.b[2],factor.a[3],factor.d[4])) - grand.avg,
mean(c(factor.c[2],factor.b[3],factor.a[4],factor.d[1])) - grand.avg,
mean(c(factor.c[3],factor.b[4],factor.a[1],factor.d[2])) - grand.avg,
mean(c(factor.c[4],factor.b[1],factor.a[2],factor.d[3])) - grand.avg),4)
mean(factor.a) - grand.avg
grand.avg + row.effects + col.effects + treatment.effects
treatments <- c(mean(factor.a) - grand.avg,
mean(factor.b) - grand.avg,
mean(factor.c) - grand.avg,
mean(factor.d) - grand.avg)
treatment.effects <- c(treatments[3],treatments[2], treatments[1],treatments[4],
treatments[4],treatments[3], treatments[2],treatments[1],
treatments[1],treatments[4], treatments[3],treatments[2],
treatments[2],treatments[1], treatments[4],treatments[3])
grand.avg + row.effects + col.effects + treatment.effects
col.effects
mean(c(factor.c[1],factor.b[1],factor.a[1],factor.d[1])) - grand.avg
mean(c(factor.c[2],factor.b[2],factor.a[2],factor.d[2])) - grand.avg
mean(c(factor.c[3],factor.b[3],factor.a[3],factor.d[3])) - grand.avg
mean(c(factor.c[4],factor.b[4],factor.a[4],factor.d[4])) - grand.avg
col.effects <- rep(c(mean(c(factor.c[1],factor.b[1],factor.a[1],factor.d[1])) - grand.avg,
mean(c(factor.c[2],factor.b[2],factor.a[2],factor.d[2])) - grand.avg,
mean(c(factor.c[3],factor.b[3],factor.a[3],factor.d[3])) - grand.avg,
mean(c(factor.c[4],factor.b[4],factor.a[4],factor.d[4])) - grand.avg),4)
treatments <- c(mean(factor.a) - grand.avg,
mean(factor.b) - grand.avg,
mean(factor.c) - grand.avg,
mean(factor.d) - grand.avg)
treatment.effects <- c(treatments[3],treatments[2], treatments[1],treatments[4],
treatments[4],treatments[3], treatments[2],treatments[1],
treatments[1],treatments[4], treatments[3],treatments[2],
treatments[2],treatments[1], treatments[4],treatments[3])
grand.avg + row.effects + col.effects + treatment.effects
fit <- grand.avg + row.effects + col.effects + treatment.effects
fit
latin.vector <- c(c(factor.c[1],factor.b[2],factor.a[3],factor.d[4]),
c(factor.c[2],factor.b[3],factor.a[4],factor.d[1]),
c(factor.c[3],factor.b[4],factor.a[1],factor.d[2]),
c(factor.c[4],factor.b[1],factor.a[2],factor.d[3]))
latin.vector <- c(c(factor.c[1],factor.b[2],factor.a[3],factor.d[4]),
c(factor.d[1],factor.c[2],factor.b[3],factor.a[4]),
c(factor.a[1],factor.d[2],factor.c[3],factor.b[4]),
c(factor.b[1],factor.a[2],factor.d[3],factor.c[4]))
fit
residuals <- latin.vector - fit
residuals
assembly.df <- read.csv("~/Documents/Senior_Year/STS 325/5-assembly.csv")
View(assembly.df)
rm(list=ls())
install.packages('tiff')
# Aidan Draper
# STS 499 - Reading and Processing TIFF files
require(tiff)
setwd('~/../../Volumes/Draper_HD/STS499_dataset')
install.packages(hexView)
install.packages('hexView')
require('hexView')
setwd('~/../../Volumes/Draper_HD/STS499_dataset')
raw_image <- readRaw("IMG_0662.CR2")
image_matrix <- matrix(raw_image$fileRaw, nrow = image_height, ncol = image_width, byrow = TRUE)
image_matrix <- matrix(raw_image$fileRaw, byrow = TRUE)
image_matrix <- matrix(raw_image$fileRaw, nrow = 3648, ncol = 5472, byrow = TRUE)
image_matrix <- matrix(raw_image$fileRaw,  byrow = TRUE)
image_matrix <- matrix(raw_image$fileRaw,  byrow = TRUE)
length(image_matrix)
length(image_matrix)/5724
length(image_matrix)/5274
require(raster)
raster.img <- raster("IMG_0662.CR2")
plot(raster.img)
rm(list=ls())
require(raster)
setwd('~/../../Volumes/Draper_HD/STS499_dataset')
raster.img <- raster("IMG_0662.CR2")
plot(raster.img)
as.matrix(raster.img)
View(raster.img)
raster.img$IMG_0662
raster.img$IMG_0662$values
raster.img$values
raster.img@data
raster.img@crs
plot(as.matrix(raster.img))
plot(as.matrix(raster.img), min=20, max=40)
as.matrix(raster.img)
mat.img <- as.matrix(raster.img)
plotRGB(mat.img)
plot(raster(mat.img))
hist(raster.img)
img.hist <- hist(raster.img)
img.hist$breaks
img.hist$counts
plot(raster(mat.img), col=grey(1:255/255))
plot(raster(mat.img), col=grey(1:255))
plot(raster(mat.img), col=grey(1:255/255))
hist(raster.img)$counts
length(mat.img)
length(mat.img[1,])
length(mat.img[,1])
for(x in 1:length(mat.img[1,])){
cat(mat.img[x,1])
}
cat(mat.img[x,1],"\n")
for(x in 1:length(mat.img[1,])){
cat(mat.img[x,1],"\n")
}
length(mat.img[1,]
length(mat.img[1,])
length(mat.img[1,])
mat.img[5472,1]
mat.img[5471,1]
mat.img[1,5471]
for(x in 1:length(mat.img[1,])){
cat(mat.img[1,x],"\n")
}
length(mat.img)
length(mat.img[1,])
new.img <- as.matrix(rep(0,length(mat.img)), nrow=length(mat.img[1,]))
for(x in 1:length(mat.img[1,])){
for(y in 1:length(mat.img[,1])){
cat(mat.img[y,x],"\n")
}
}
mat.img <- as.matrix(raster.img, byrow=TRUE)
plot(raster(mat.img), col=grey(1:255/255))
plot(mat.img)
# applying kernel filters as 3 x 3 grids and estimating the center value
new.img <- as.matrix(rep(0,length(mat.img)), nrow=length(mat.img[1,]), byrow=TRUE)
mat.img[1,5471]
clear
for(x in 2:length(mat.img[1,])-1){
#for(y in 2:length(mat.img[,1])-1){
cat(mat.img[x,1],"\n")
#new.img <- mean(c(mat.img[y,x],mat.img[y,x],mat.img[y,x],
#        mat.img[y,x],mat.img[y,x],mat.img[y,x],
#        mat.img[y,x],mat.img[y,x],mat.img[y,x]))
#}
}
for(x in 2:length(mat.img[1,])-1){
#for(y in 2:length(mat.img[,1])-1){
cat(mat.img[y,1],"\n")
#new.img <- mean(c(mat.img[y,x],mat.img[y,x],mat.img[y,x],
#        mat.img[y,x],mat.img[y,x],mat.img[y,x],
#        mat.img[y,x],mat.img[y,x],mat.img[y,x]))
#}
}
length(mat.img[,1])
for(x in 2:length(mat.img[1,])-1){
for(y in 2:length(mat.img[,1])-1){
#cat(mat.img[y,x],"\n")
new.img <- mean(c(mat.img[y-1,x-1],mat.img[y-1,x],mat.img[y-1,x+1],
mat.img[y,x-1],mat.img[y,x],mat.img[y,x+1],
mat.img[y+1,x-1],mat.img[y+1,x],mat.img[y+1,x+1]))
}
}
# applying kernel filters as 3 x 3 grids and estimating the center value
new.img <- as.matrix(rep(0,length(mat.img)), nrow=length(mat.img[1,]), byrow=TRUE)
for(x in 2:length(mat.img[1,])-1){
for(y in 2:length(mat.img[,1])-1){
#cat(mat.img[y,x],"\n")
new.img[y,x] <- mean(c(mat.img[y-1,x-1],mat.img[y-1,x],mat.img[y-1,x+1],
mat.img[y,x-1],mat.img[y,x],mat.img[y,x+1],
mat.img[y+1,x-1],mat.img[y+1,x],mat.img[y+1,x+1]))
}
}
length(mat.img[,1])
length(mat.img[1,])
# applying kernel filters as 3 x 3 grids and estimating the center value
new.img <- as.matrix(rep(0,length(mat.img)), nrow=length(mat.img[1,]),ncol=length(mat.img[,1]), byrow=TRUE)
# applying kernel filters as 3 x 3 grids and estimating the center value
new.img <- amatrix(rep(0,length(mat.img)), nrow=length(mat.img[1,]),ncol=length(mat.img[,1]), byrow=TRUE)
# applying kernel filters as 3 x 3 grids and estimating the center value
new.img <- matrix(rep(0,length(mat.img)), nrow=length(mat.img[1,]),ncol=length(mat.img[,1]), byrow=TRUE)
# applying kernel filters as 3 x 3 grids and estimating the center value
new.img <- matrix(rep(0,length(mat.img)), ncol=length(mat.img[1,]),nrow=length(mat.img[,1]), byrow=TRUE)
length(mat.img[,1])
for(x in 2:length(mat.img[1,])-1){
for(y in 2:length(mat.img[,1])-1){
#cat(mat.img[y,x],"\n")
new.img[y,x] <- mean(c(mat.img[y-1,x-1],mat.img[y-1,x],mat.img[y-1,x+1],
mat.img[y,x-1],mat.img[y,x],mat.img[y,x+1],
mat.img[y+1,x-1],mat.img[y+1,x],mat.img[y+1,x+1]))
}
}
plot(raster(new.img), col=grey(1:255/255))
plot(raster(mat.img), col=grey(1:255/255))
plot(raster(new.img), col=grey(1:255/255))
plot(raster(mat.img), col=grey(1:255/255), main="Origional")
plot(raster(new.img), col=grey(1:255/255), main="Homemade Mean Filter")
MSE.noise <- sum(abs(mat.img - true.img)^2)/length(true.img)
# calculate PSNR
true.img <- as.matrix(raster("IMG_0660.CR2"), byrow=TRUE)
MSE.noise <- sum(abs(mat.img - true.img)^2)/length(true.img)
MSE.mean <- sum(abs(new.img - true.img)^2)/length(true.img)
rsq.noise <- 1 - (sum((true.img-mat.img)^2)/sum((true.img-mean(true.img))^2))
rsq.mean <- 1 - (sum((true.img-new.img)^2)/sum((true.img-mean(true.img))^2))
psnr.noise <- 20*log10(rsq.noise/MSE.noise)
psnr.mean <- 20*log10(rsq.mean/MSE.mean)
psnr.noise <- 20*log10(255^2/MSE.noise)
psnr.mean <- 20*log10(255^2/MSE.mean)
median.img <- matrix(rep(0,length(mat.img)), ncol=length(mat.img[1,]),nrow=length(mat.img[,1]), byrow=TRUE)
for(x in 2:length(mat.img[1,])-1){
for(y in 2:length(mat.img[,1])-1){
#cat(mat.img[y,x],"\n")
median.img[y,x] <- median(c(mat.img[y-1,x-1],mat.img[y-1,x],mat.img[y-1,x+1],
mat.img[y,x-1],mat.img[y,x],mat.img[y,x+1],
mat.img[y+1,x-1],mat.img[y+1,x],mat.img[y+1,x+1]))
}
}
plot(raster(median.img), col=grey(1:255/255), main="Homemade Median Filter")
MSE.median <- sum(abs(median.img - true.img)^2)/length(true.img)
psnr.median <- 20*log10(255^2/MSE.median)
rsq.mean <- 1 - (sum((true.img-median.img)^2)/sum((true.img-mean(true.img))^2))
rsq.median <- 1 - (sum((true.img-median.img)^2)/sum((true.img-mean(true.img))^2))
for(x in 2:length(mat.img[1,])-1){
for(y in 2:length(mat.img[,1])-1){
#cat(mat.img[y,x],"\n")
mean.img[y,x] <- mean(c(mat.img[y-1,x-1],mat.img[y-1,x],mat.img[y-1,x+1],
mat.img[y,x-1],mat.img[y,x],mat.img[y,x+1],
mat.img[y+1,x-1],mat.img[y+1,x],mat.img[y+1,x+1]))
}
}
# applying kernel filters as 3 x 3 grids and estimating the center value
mean.img <- matrix(rep(0,length(mat.img)), ncol=length(mat.img[1,]),nrow=length(mat.img[,1]), byrow=TRUE)
for(x in 2:length(mat.img[1,])-1){
for(y in 2:length(mat.img[,1])-1){
#cat(mat.img[y,x],"\n")
mean.img[y,x] <- mean(c(mat.img[y-1,x-1],mat.img[y-1,x],mat.img[y-1,x+1],
mat.img[y,x-1],mat.img[y,x],mat.img[y,x+1],
mat.img[y+1,x-1],mat.img[y+1,x],mat.img[y+1,x+1]))
}
}
save(median.img,mean.img, "~/Documents/Senior_Year/STS\ 499/kernel_imgs.rdata")
setwd("~/Documents/Senior_Year/STS\ 499/")
save(median.img,mean.img, "kernel_imgs.rdata")
save(median.img,mean.img, file="kernel_imgs.rdata")
# compare them visually
plot(raster(mat.img), col=grey(1:255/255), main="Origional", xaxt='n', ann=FALSE)
# compare them visually
plot(raster(mat.img), col=grey(1:255/255), main="Origional", xaxt='n', yant='n')
# compare them visually
plot(1)
plot(raster(mat.img), col=grey(1:255/255), main="Origional", xaxt='n', yant='n',add=TRUE)
# compare them visually
plot(255)
plot(raster(mat.img), col=grey(1:255/255), main="Origional", xaxt='n', yant='n',add=TRUE)
# compare them visually
plot(raster(mat.img), col=grey(1:255/255), main="Origional", xaxt='n', yant='n', asp=NA)
# compare them visually
op <- par(mar=rep(0, 4))
plot(raster(mat.img), col=grey(1:255/255), main="Origional", xaxt='n', yant='n', asp=NA)
par(op)
# compare them visually
op <- par(mar=rep(0, 4))
plot(raster(mat.img), col=grey(1:255/255), main="Origional", xaxt='n', yant='n', ann=FALSE)
par(op)
plot(raster(mat.img), col=grey(1:255/255), main="Origional", xaxt='n', yant='n', asp=NA, ann=FALSE)
# compare them visually
op <- par(mar=rep(0, 4))
plot(raster(mat.img), col=grey(1:255/255), main="Origional", xaxt='n', yant='n', asp=NA, ann=FALSE)
par(op)
# compare them visually
op <- par(mar=rep(0, 4))
plot(raster(mat.img), col=grey(1:255/255), main="Origional", xaxt='n', yant='n', asp=NA, ann=FALSE)
legend("none")
par(op)
# compare them visually
op <- par(mar=rep(0, 4))
plot(raster(mat.img), col=grey(1:255/255), main="Origional", xaxt='n', yant='n', asp=NA, ann=FALSE)
legend(NULL)
par(op)
# compare them visually
op <- par(mar=rep(0, 4))
plot(raster(mat.img), col=grey(1:255/255), main="Origional", xaxt='n', yant='n', asp=NA, ann=FALSE)
par(op)
plot(raster(mean.img), col=grey(1:255/255), main="Homemade Mean Filter")
plot(raster(mean.img), col=grey(1:255/255), main="Homemade Mean Filter", asp=NA, ann=FALSE)
plot(raster(mean.img), col=grey(1:255/255), main="Homemade Mean Filter", asp=NA)
# compare them visually
op <- par(mar=rep(0, 4))
plot(raster(mat.img), col=grey(1:255/255), main="Origional", xaxt='n', yant='n', asp=NA)
par(op)
plot(raster(mean.img), col=grey(1:255/255), main="Homemade Mean Filter", asp=NA)
plot(raster(mean.img), col=grey(1:255/255), main="Homemade Mean Filter", asp=NA)
par(op)
plot(raster(median.img), col=grey(1:255/255), main="Homemade Median Filter", asp=NA, ann=FALSE)
par(op)
# compare them visually
plot(raster(mat.img), col=grey(1:255/255), main="Origional", xaxt='n', yant='n', asp=NA)
plot(raster(mean.img), col=grey(1:255/255), main="Homemade Mean Filter", asp=NA)
plot(raster(median.img), col=grey(1:255/255), main="Homemade Median Filter", asp=NA, ann=FALSE)
# compare them visually
plot(raster(mat.img), col=grey(1:255/255), main="Origional", xant='n', yant='n', asp=NA)
plot(raster(mean.img), col=grey(1:255/255), main="Homemade Mean Filter", xant='n', yant='n',asp=NA)
plot(raster(median.img), col=grey(1:255/255), main="Homemade Median Filter", xant='n', yant='n',asp=NA)
# compare them visually
plot(raster(mat.img), col=grey(1:255/255), main="Origional", asp=NA)
plot(raster(mean.img), col=grey(1:255/255), main="Homemade Mean Filter", asp=NA)
plot(raster(median.img), col=grey(1:255/255), main="Homemade Median Filter", asp=NA)
plot(raster(true.img), col=grey(1:255/255), main="Noiseless Image", asp=NA)
rm(list=ls())
warnings()
rm(list=ls())
