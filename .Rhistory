getReviews <- function(url="https://www.glassdoor.com/Reviews/Veolia-Reviews-E20114.htm", page_num=1){
if (page_num <= 1){
webpage <- url %>% read_html()
reviews <- webpage %>% html_nodes( ".reviewBodyCell") %>% html_text()
review_data <- vector(mode = "character", length = length(reviews))
for(x in 1:length(reviews)){
reviews <- gsub("Pros", " ", reviews)
reviews <- gsub("Cons", " ", reviews)
current <- substr(x=reviews[x],start=1, stop = regexpr('Share on Facebook', reviews[x])[1]-1)
review_data[x] <- current
print(paste(current))
}
return(review_data)
} else {
url_list <- vector(mode = "character", length = page_num)
for (i in 1:page_num){
url_list[i] <- paste(substr(x=url,start=1,stop=(nchar(url)-4)), "_P",as.character(i),".htm", sep="")
}
return(url_list)
}
}
review_data <- getReviews(page_num = 5)
review_data
getReviews <- function(url="https://www.glassdoor.com/Reviews/Veolia-Reviews-E20114.htm", page_num=1){
if (page_num <= 1){
webpage <- url %>% read_html()
reviews <- webpage %>% html_nodes( ".reviewBodyCell") %>% html_text()
review_data <- vector(mode = "character", length = length(reviews))
for(x in 1:length(reviews)){
reviews <- gsub("Pros", " ", reviews)
reviews <- gsub("Cons", " ", reviews)
current <- substr(x=reviews[x],start=1, stop = regexpr('Share on Facebook', reviews[x])[1]-1)
review_data[x] <- current
print(paste(current))
}
return(review_data)
} else {
url_list <- vector(mode = "character", length = page_num)
for (i in 1:page_num){
if(i>1){
url_list[i] <- paste(substr(x=url,start=1,stop=(nchar(url)-4)), "_P",as.character(i),".htm", sep="")
} else{
url_list[i] <- url
}
}
return(url_list)
}
}
review_data <- getReviews(page_num = 5)
review_data
getReviews <- function(url="https://www.glassdoor.com/Reviews/Veolia-Reviews-E20114.htm", page_num=1){
if (page_num <= 1){
webpage <- url %>% read_html()
reviews <- webpage %>% html_nodes( ".reviewBodyCell") %>% html_text()
review_data <- vector(mode = "character", length = length(reviews))
for(x in 1:length(reviews)){
reviews <- gsub("Pros", " ", reviews)
reviews <- gsub("Cons", " ", reviews)
current <- substr(x=reviews[x],start=1, stop = regexpr('Share on Facebook', reviews[x])[1]-1)
review_data[x] <- current
print(paste(current))
}
return(review_data)
} else {
url_list <- vector(mode = "character", length = page_num)
for (i in 1:page_num){
if(i>1){
url_list[i] <- paste(substr(x=url,start=1,stop=(nchar(url)-4)), "_P",as.character(i),".htm", sep="")
} else{
url_list[i] <- url
}
}
return(url_list)
}
}
review_data <- getReviews(url="https://www.glassdoor.com/Reviews/U-S-Bank-Reviews-E8937.htm",page_num = 430)
review_data
con<-file('~/Documents/Junior_Year/DataAnalytics/ManhattanUS_bank.csv',encoding="UTF-8")
write.csv(review_data, file = con)
getReviews <- function(url="https://www.glassdoor.com/Reviews/Veolia-Reviews-E20114.htm", page_num=1){
if (page_num <= 1){
webpage <- url %>% read_html()
reviews <- webpage %>% html_nodes( ".reviewBodyCell") %>% html_text()
review_data <- vector(mode = "character", length = length(reviews))
for(x in 1:length(reviews)){
reviews <- gsub("Pros", " ", reviews)
reviews <- gsub("Cons", " ", reviews)
current <- substr(x=reviews[x],start=1, stop = regexpr('Share on Facebook', reviews[x])[1]-1)
review_data[x] <- current
print(paste(current))
}
return(review_data)
} else {
url_list <- vector(mode = "character", length = page_num)
for (i in 1:page_num){
if(i>1){
url_list[i] <- paste(substr(x=url,start=1,stop=(nchar(url)-4)), "_P",as.character(i),".htm", sep="")
} else{
url_list[i] <- url
}
}
for (y in 1:page_num){
url <- url_list[y]
webpage <- url %>% read_html()
reviews <- webpage %>% html_nodes( ".reviewBodyCell") %>% html_text()
review_data <- vector(mode = "character", length = page_num*10)
counter <- 1
for(x in 1:length(reviews)){
reviews <- gsub("Pros", " ", reviews)
reviews <- gsub("Cons", " ", reviews)
current <- substr(x=reviews[x],start=1, stop = regexpr('Share on Facebook', reviews[x])[1]-1)
review_data[counter] <- current
counter <- counter + 1
print(paste(current))
}
}
return(review_data)
}
}
review_data <- getReviews(url="https://www.glassdoor.com/Reviews/U-S-Bank-Reviews-E8937.htm",page_num = 430)
review_data
con<-file('~/Documents/Junior_Year/DataAnalytics/ManhattanUS_bank.csv',encoding="UTF-8")
write.csv(review_data, file = con)
getReviews <- function(url="https://www.glassdoor.com/Reviews/Veolia-Reviews-E20114.htm", page_num=1){
if (page_num <= 1){
webpage <- url %>% read_html()
reviews <- webpage %>% html_nodes( ".reviewBodyCell") %>% html_text()
review_data <- vector(mode = "character", length = length(reviews))
for(x in 1:length(reviews)){
reviews <- gsub("Pros", " ", reviews)
reviews <- gsub("Cons", " ", reviews)
current <- substr(x=reviews[x],start=1, stop = regexpr('Share on Facebook', reviews[x])[1]-1)
review_data[x] <- current
print(paste(current))
}
return(review_data)
} else {
url_list <- vector(mode = "character", length = page_num)
for (i in 1:page_num){
if(i>1){
url_list[i] <- paste(substr(x=url,start=1,stop=(nchar(url)-4)), "_P",as.character(i),".htm", sep="")
} else{
url_list[i] <- url
}
}
for (y in 1:page_num){
url <- url_list[y]
webpage <- url %>% read_html()
reviews <- webpage %>% html_nodes( ".reviewBodyCell") %>% html_text()
review_data <- vector(mode = "character", length = page_num*10)
counter <- 1
for(x in 1:length(reviews)){
reviews <- gsub("Pros", " ", reviews)
reviews <- gsub("Cons", " ", reviews)
current <- substr(x=reviews[x],start=1, stop = regexpr('Share on Facebook', reviews[x])[1]-1)
review_data[counter] <- current
counter <- counter + 1
#print(paste(current))
}
}
return(review_data)
}
}
review_data <- getReviews(url="https://www.glassdoor.com/Reviews/U-S-Bank-Reviews-E8937.htm",page_num = 20)
con<-file('~/Documents/Junior_Year/DataAnalytics/Manhattan/US_bank.csv',encoding="UTF-8")
write.csv(review_data, file = con)
library(rvest)
getReviews <- function(url="https://www.glassdoor.com/Reviews/Veolia-Reviews-E20114.htm", page_num=1){
if (page_num <= 1){
webpage <- url %>% read_html()
reviews <- webpage %>% html_nodes( ".reviewBodyCell") %>% html_text()
review_data <- vector(mode = "character", length = length(reviews))
for(x in 1:length(reviews)){
reviews <- gsub("Pros", " ", reviews)
reviews <- gsub("Cons", " ", reviews)
current <- substr(x=reviews[x],start=1, stop = regexpr('Share on Facebook', reviews[x])[1]-1)
review_data[x] <- current
print(paste(current))
}
return(review_data)
} else {
url_list <- vector(mode = "character", length = page_num)
for (i in 1:page_num){
if(i>1){
url_list[i] <- paste(substr(x=url,start=1,stop=(nchar(url)-4)), "_P",as.character(i),".htm", sep="")
} else{
url_list[i] <- url
}
}
counter <- 1
for (y in 1:page_num){
url <- url_list[y]
webpage <- url %>% read_html()
reviews <- webpage %>% html_nodes( ".reviewBodyCell") %>% html_text()
review_data <- vector(mode = "character", length = page_num*10)
for(x in 1:length(reviews)){
reviews <- gsub("Pros", " ", reviews)
reviews <- gsub("Cons", " ", reviews)
current <- substr(x=reviews[x],start=1, stop = regexpr('Share on Facebook', reviews[x])[1]-1)
review_data[counter] <- current
counter <- counter + 1
#print(paste(current))
}
}
return(review_data)
}
}
review_data <- getReviews(url="https://www.glassdoor.com/Reviews/U-S-Bank-Reviews-E8937.htm",page_num = 20)
con<-file('~/Documents/Junior_Year/DataAnalytics/Manhattan/US_bank.csv',encoding="UTF-8")
write.csv(review_data, file = con)
reviews <- webpage %>% html_nodes( ".reviewBodyCell") %>% html_text()
library(rvest)
getReviews <- function(url="https://www.glassdoor.com/Reviews/Veolia-Reviews-E20114.htm", page_num=1){
if (page_num <= 1){
webpage <- url %>% read_html()
reviews <- webpage %>% html_nodes( ".reviewBodyCell") %>% html_text()
review_data <- vector(mode = "character", length = length(reviews))
for(x in 1:length(reviews)){
reviews <- gsub("Pros", " ", reviews)
reviews <- gsub("Cons", " ", reviews)
current <- substr(x=reviews[x],start=1, stop = regexpr('Share on Facebook', reviews[x])[1]-1)
review_data[x] <- current
print(paste(current))
}
return(review_data)
} else {
url_list <- vector(mode = "character", length = page_num)
for (i in 1:page_num){
if(i>1){
url_list[i] <- paste(substr(x=url,start=1,stop=(nchar(url)-4)), "_P",as.character(i),".htm", sep="")
} else{
url_list[i] <- url
}
}
counter <- 1
review_data <- vector(mode = "character", length = page_num*10)
for (y in 1:page_num){
url <- url_list[y]
webpage <- url %>% read_html()
reviews <- webpage %>% html_nodes( ".reviewBodyCell") %>% html_text()
for(x in 1:length(reviews)){
reviews <- gsub("Pros", " ", reviews)
reviews <- gsub("Cons", " ", reviews)
current <- substr(x=reviews[x],start=1, stop = regexpr('Share on Facebook', reviews[x])[1]-1)
review_data[counter] <- current
counter <- counter + 1
#print(paste(current))
}
}
return(review_data)
}
}
review_data <- getReviews(url="https://www.glassdoor.com/Reviews/U-S-Bank-Reviews-E8937.htm",page_num = 20)
con<-file('~/Documents/Junior_Year/DataAnalytics/Manhattan/US_bank.csv',encoding="UTF-8")
write.csv(review_data, file = con)
library(rvest)
getReviews <- function(url="https://www.glassdoor.com/Reviews/Veolia-Reviews-E20114.htm", page_num=1){
if (page_num <= 1){
webpage <- url %>% read_html()
reviews <- webpage %>% html_nodes( ".reviewBodyCell") %>% html_text()
review_data <- vector(mode = "character", length = length(reviews))
for(x in 1:length(reviews)){
reviews <- gsub("Pros", " ", reviews)
reviews <- gsub("Cons", " ", reviews)
current <- substr(x=reviews[x],start=1, stop = regexpr('Share on Facebook', reviews[x])[1]-1)
review_data[x] <- current
print(paste(current))
}
return(review_data)
} else {
url_list <- vector(mode = "character", length = page_num)
for (i in 1:page_num){
if(i>1){
url_list[i] <- paste(substr(x=url,start=1,stop=(nchar(url)-4)), "_P",as.character(i),".htm", sep="")
} else{
url_list[i] <- url
}
}
counter <- 1
review_data <- vector(mode = "character", length = page_num*10)
for (y in 1:page_num){
url <- url_list[y]
webpage <- url %>% read_html()
reviews <- webpage %>% html_nodes( ".reviewBodyCell") %>% html_text()
for(x in 1:length(reviews)){
reviews <- gsub("Pros", " ", reviews)
reviews <- gsub("Cons", " ", reviews)
reviews <- gsub("Advice to Management", " ", reviews)
current <- substr(x=reviews[x],start=1, stop = regexpr('Share on Facebook', reviews[x])[1]-1)
review_data[counter] <- current
counter <- counter + 1
#print(paste(current))
}
}
return(review_data)
}
}
review_data <- getReviews(url="https://www.glassdoor.com/Reviews/U-S-Bank-Reviews-E8937.htm",page_num = 430)
con<-file('~/Documents/Junior_Year/DataAnalytics/Manhattan/US_bank.csv',encoding="UTF-8")
write.csv(review_data, file = con)
review_data <- getReviews(url="https://www.glassdoor.com/Reviews/Transdev-Reviews-E413452.htm",page_num = 24)
con<-file('~/Documents/Junior_Year/DataAnalytics/Manhattan/Transdev.csv',encoding="UTF-8")
write.csv(review_data, file = con)
review_data <- getReviews(url="https://www.glassdoor.com/Reviews/First-Student-Reviews-E16694.htm",page_num = 44)
review_data <- getReviews(url="https://www.glassdoor.com/Reviews/First-Student-Reviews-E16694.htm",page_num = 44)
con<-file('~/Documents/Junior_Year/DataAnalytics/Manhattan/First_student.csv',encoding="UTF-8")
write.csv(review_data, file = con)
review_data <- getReviews(url="https://www.glassdoor.com/Reviews/Veolia-Reviews-E20114.htm",page_num = 63)
con<-file('~/Documents/Junior_Year/DataAnalytics/Manhattan/Veolia.csv',encoding="UTF-8")
write.csv(review_data, file = con)
review_data <- getReviews(url="https://www.glassdoor.com/Reviews/Harvard-Pilgrim-Reviews-E2816.htm",page_num = 10)
con<-file('~/Documents/Junior_Year/DataAnalytics/Manhattan/Harvard_pilgrim.csv',encoding="UTF-8")
write.csv(review_data, file = con)
review_data <- getReviews(url="https://www.glassdoor.com/Reviews/TD-Reviews-E3767.htm",page_num = 144)
con<-file('~/Documents/Junior_Year/DataAnalytics/Manhattan/TD_bank.csv',encoding="UTF-8")
write.csv(review_data, file = con)
review_data <- getReviews(url="https://www.glassdoor.com/Reviews/Motorola-Solutions-Reviews-E427189.htm",page_num = 68)
con<-file('~/Documents/Junior_Year/DataAnalytics/Manhattan/Motorola.csv',encoding="UTF-8")
write.csv(review_data, file = con)
install.packages("gjam")
library(gjam)
install.packages("gjam")
install.packages("RcppArmadillo")
install.packages(gjam)
install.packages("gjam")
install.packages("RcppArmadillo")
install.packages("gjam")
library(gjam)
install.packages("coda")
install.packages("gridExtra")
install.packages('mgcv')
install.packages('zoo')
install.packages('Matrix')
install.packages('cowplot')
install.packages('spBayes')
install.packages('snow')
install.packages('snowfall')
install.packages('rlecuyer')
range(3,1)
diff(3,1)
25-21-1
25-21+1
l <- vector("list", 3)
l[[1]] <- 7
matrix(seq(1,6), seq(1,6)
)
matrix(seq(1,6), seq(1,6)
matrix(seq(1,6), seq(1,6))
data.frame(seq(1,6), seq(1,6))
knitr::opts_chunk$set(echo = TRUE)
choose(11,11)
install.packages("combinat")
permn(c("M","I","S","S","I","S","S","I", "P","P", "I"))
library(combinat)
permn(c("M","I","S","S","I","S","S","I", "P","P", "I"))
nrows??
q
??nrows
nrow(permn(c("M","I","S","S","I","S","S","I", "P","P", "I")))
#library(combinat)
2^11
total <- factorial(11)
total
ans2 <- (8)*(10^6)
(three.of.suit**3)*four.of.suit
total.hands <- 2**52
three.of.suit <- choose(13,3)
four.of.suit <- choose(13,4)
num.suits <- 4
ans33 <- (num.suits*(three.of.suit**3)*four.of.suit)/total.hands
cat("Probability is:", ans33)
pf()
pf(3,4)
pf(df1=3,df2=4)
pf(q=17.47,df1=3,df2=4)
1-pf(q=17.47,df1=3,df2=4)
65.5^2 * 4
8^2*4
4.5^2*2+3.5^2*2
256/32.5
knitr::opts_chunk$set(echo = TRUE)
choose(30, 5)
choose(25, 5)
choose(20, 5)
num.scenario <- choose(30, 5) * choose(25, 5) * choose(20, 5) * choose(15, 5) * choose(10, 5) * choose(5,5)
6!
factorial(6!)
factorial(6)
total.hands <- choose(52,13)
total.hands
7*(9^2)*10^4
ans2a <- (8)*(10^6)
ans2a - 10^4
choose(6^6, 6)
all.six <- choose(6^rolls, 6)
rolls <- 6 # some arbitrary number
total.rolls <- 6^rolls
all.six <- factorial(6)/total.rolls
(1 - all.six)
(6*((5/6)^rolls)) - (choose(6,2)*((4/6)^rolls)) + (choose(6,3)*((3/6)^rolls)) - (choose(6,4)*((2/6)^rolls)) + (choose(6,5)*((1/6)^rolls))
1 - factorial(rolls)/6^rolls
rolls <- 100 # some arbitrary number
paste(ans47,sep = ", "
paste(ans47,sep = ", ")
ans47 <- (6*one.num) - (choose(6,2)*two.num) + (choose(6,3)*three.num) - (choose(6,4)*four.num) + (choose(6,5)*five.num)
rolls <- 1:10 # some arbitrary number
#1 - factorial(rolls)/(6^rolls)
#1 - 6*choose(7,2)*factorial(5)/6^rolls
# The first works for six rolls but nothing else. The next only works for 7. I cannot do the inverse probability...
#the likelihood of seeing (n - numerator) many different numbers based on rolls
one.num <- (5/6)^rolls
two.num <- (4/6)^rolls
three.num <- (3/6)^rolls
four.num <- (2/6)^rolls
five.num <- (1/6)^rolls
# the final equation with the possibilities of different dice numbers available per roll as a multiplicative of the sums of all the different events
ans47 <- (6*one.num) - (choose(6,2)*two.num) + (choose(6,3)*three.num) - (choose(6,4)*four.num) + (choose(6,5)*five.num)
paste(ans47,sep = ", ")
print(ans47,sep = ", ")
paste0(ans47,collapse = ", ")
cat("Probabilities are:", paste0(ans47,collapse = ", "))
getwd()
setwd("~/Documents/Senior_Year/STS\ 499")
#image upload formats; sourced from: https://cdn.photographylife.com/wp-content/uploads/2010/07/Flying-Duck-Crop.jpg
imager.jpg <- load.image("duck.jpg") #imager package
read.jpg <- readJPEG("duck.jpg") #'jpeg' package
raster.jpg <- raster('duck.jpg') #rasterImage package
library('jpeg')
library(rasterImage)
library(imager)
# noise filter packages
library(wvtool) #grayscale only: gaussian, median, and mean filters
library(NoiseFiltersR)
setwd("~/Documents/Senior_Year/STS\ 499")
#image upload formats; sourced from: https://cdn.photographylife.com/wp-content/uploads/2010/07/Flying-Duck-Crop.jpg
imager.jpg <- load.image("duck.jpg") #imager package
read.jpg <- readJPEG("duck.jpg") #'jpeg' package
raster.jpg <- raster('duck.jpg') #rasterImage package
library('jpeg')
library(raster)
library(imager)
# noise filter packages
library(wvtool) #grayscale only: gaussian, median, and mean filters
library(NoiseFiltersR)
setwd("~/Documents/Senior_Year/STS\ 499")
#image upload formats; sourced from: https://cdn.photographylife.com/wp-content/uploads/2010/07/Flying-Duck-Crop.jpg
imager.jpg <- load.image("duck.jpg") #imager package
read.jpg <- readJPEG("duck.jpg") #'jpeg' package
raster.jpg <- raster('duck.jpg') #rasterImage package
gauss <- image(noise.filter(rotate.matrix(as.matrix(raster.jpg), 90),3,"gaussian"), col=gray(c(0:255)/255), main = "Noise Removed (Gaussian)")
par(mfrow=c(1,1))
plot(gauss)
gaussian <- noise.filter(rotate.matrix(as.matrix(raster.jpg), 90),3,"gaussian")
hist(gaussian)
hist(raster.jpg)
hist(gaussian)
install.packages("magick")
library(magick)
library('jpeg')
library(raster)
library(imager)
library(wvtool) #grayscale only: gaussian, median, and mean filters
library(NoiseFiltersR)
library(magick)
#image upload formats; sourced from: https://cdn.photographylife.com/wp-content/uploads/2010/07/Flying-Duck-Crop.jpg
imager.jpg <- load.image("duck.jpg") #imager package
read.jpg <- readJPEG("duck.jpg") #'jpeg' package
raster.jpg <- raster('duck.jpg') #raster package
#distributions of image values
hist(imager.jpg)
hist(read.jpg)
hist(raster.jpg)
View(gaussian)
#inital plots of images
plot(read.jpg)
#inital plots of images
#plot(read.jpg)
plot(raster.jpg)
#inital plots of images
#plot(read.jpg)
plot(raster.jpg)
hist(raster.jpg)
#inital plots of images
#plot(read.jpg)
plot(raster.jpg)
plot(imager.jpg)
############## EXAMPLE: from online using mvtool (a wood vision tool?) ##############
data(camphora)
camphora <- crop(camphora,200,200)
??crop
library(raster)
camphora <- crop(camphora,200,200)
par(mfrow=c(1,1))
image(rot90c(camphora),col=gray(c(0:255)/255), main="Cinnamomum camphora")
par(mfrow=c(1,1))
image(rot90c(noise.filter(camphora,3,"gaussian")),col=gray(c(0:255)/255),
main="gaussian filter example", useRaster=TRUE)
par(mfrow=c(1,1))
image(raster.jpg, col=gray(c(0:255)/255), main = "Gaussian Distribution Noise")
gaussian <- noise.filter(rotate.matrix(as.matrix(raster.jpg), 90),3,"gaussian")
par(mfrow=c(1,1))
image(gaussian, col=gray(c(0:255)/255), main = "Noise Removed (Gaussian)")
#comparing the distribution of origional and gaussian filter (are they removing a gaussian distribution?)
hist(raster.jpg)
hist(gaussian)
par(mfrow=c(1,1))
image(raster.jpg, col=gray(c(0:255)/255), main = "Gaussian Distribution Noise")
par(mfrow=c(1,1))
image(noise.filter(rotate.matrix(as.matrix(raster.jpg), 90),3,"mean"), col=gray(c(0:255)/255), main = "Noise Removed (Mean)")
par(mfrow=c(1,1))
image(noise.filter(rotate.matrix(as.matrix(raster.jpg), 90),3,"median"), col=gray(c(0:255)/255), main = "Noise Removed (Median)")
??Nile
